{
  "problem_id": 65,
  "problem": "choose_num",
  "method": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1",
  "tests": [
    {
      "test": "def test():\n        assert choose_num(13, 12) == -1",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        "!",
        "!",
        "!",
        "!"
      ]
    },
    {
      "test": "def test():\n        assert choose_num(12, 15) == 14",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">",
        "!",
        ">",
        "!",
        ">"
      ]
    },
    {
      "test": "def test():\n        assert choose_num(6, 29) == 28",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">",
        "!",
        ">",
        "!",
        ">"
      ]
    },
    {
      "test": "def test():\n        assert choose_num(27, 10) == -1",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        "!",
        "!",
        "!",
        "!"
      ]
    },
    {
      "test": "def test():\n        assert choose_num(5234, 5233) == -1",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        "!",
        "!",
        "!",
        "!"
      ]
    },
    {
      "test": "def test():\n        assert choose_num(33, 12354) == 12354",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">",
        ">",
        "!",
        "!",
        "!"
      ]
    },
    {
      "test": "def test():\n        assert choose_num(7, 7) == -1",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">",
        "!",
        ">",
        ">",
        "!"
      ]
    },
    {
      "test": "def test():\n        assert choose_num(546, 546) == 546",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">",
        ">",
        "!",
        "!",
        "!"
      ]
    }
  ]
}
