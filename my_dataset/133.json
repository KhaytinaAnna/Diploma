{
  "problem_id": 133,
  "problem": "below_threshold",
  "method": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            return False\n    return True",
  "tests": [
    {
      "test": "def test():\n        assert below_threshold([1, 2, 4, 10], 100)",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">"
      ]
    },
    {
      "test": "def test():\n        assert not below_threshold([1, 20, 4, 10], 5)",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!"
      ]
    },
    {
      "test": "def test():\n        assert below_threshold([1, 20, 4, 10], 21)",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">"
      ]
    },
    {
      "test": "def test():\n        assert below_threshold([1, 8, 4, 10], 11)",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">"
      ]
    },
    {
      "test": "def test():\n        assert below_threshold([1, 20, 4, 10], 22)",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!",
        ">"
      ]
    },
    {
      "test": "def test():\n        assert not below_threshold([1, 8, 4, 10], 10)",
      "coverage_sequence": [
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        ">",
        "!"
      ]
    }
  ]
}
